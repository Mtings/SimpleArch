plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'android-aspectjx'
}
configurations.all {
    resolutionStrategy {
        force 'com.google.code.gson:gson:2.8.6'
//        force 'com.squareup.okhttp3:okhttp:3.12.0'
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    defaultConfig {
        applicationId "com.song.sakura"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        resConfigs "en", "zh"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    buildFeatures {
        dataBinding = true
    }
    signingConfigs {
        release {
            storeFile file('../doc/acg.jks')
            storePassword "123456"
            keyAlias "acg"
            keyPassword "123456"
        }

    }
    lintOptions {
        disable 'RestrictedApi'
        disable 'InvalidPackage'
        abortOnError false
        ignoreWarnings true
    }
    buildTypes {
        debug {
            debuggable true
            shrinkResources false
            zipAlignEnabled false
            minifyEnabled false
            signingConfig signingConfigs.release
            buildConfigField 'String', 'BASE_URL', '"https://www.wanandroid.com/"'
        }
        release {
            shrinkResources true
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField 'String', 'BASE_URL', '"https://www.wanandroid.com/"'
        }
    }
    defaultConfig {
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        kapt {
            arguments {
                arg("moduleName", project.getName())
            }
        }
    }

    // 执行配置
    applicationVariants.all { variant ->

        // Apk 输出配置
        variant.outputs.all { output ->
            outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name
            if (variant.buildType.name == buildTypes.release.getName()) {
                outputFileName += '_' + new Date().format("yyyyMMdd")
            }
            outputFileName += '.apk'
        }
    }

    // 设置 SO 库存放目录
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        // work-runtime-ktx 2.1.0 and above now requires Java 8
        jvmTarget = "1.8"

        // Enable Coroutines and Flow APIs
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
    }
    aspectjx {
        enabled true
        exclude 'versions.9' //兼容kotlin 1.4.10
        exclude 'androidx', 'com.google', 'com.squareup.leakcanary'
    }
}

dependencies {
    // 依赖 libs 目录下所有 jar aar包
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')

    implementation project(':basehttp')
    implementation project(':baseui')

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // MultiDex(for androidx)
    // https://developer.android.google.cn/studio/build/multidex
//    implementation 'androidx.multidex:multidex:2.0.1'

    //kotlin协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
//    implementation 'androidx.core:core-ktx:1.5.0-beta01'

    def navigation_version = "2.3.3"
    //navigation相关库
    implementation "androidx.navigation:navigation-runtime:$navigation_version"
    implementation "androidx.navigation:navigation-fragment:$navigation_version"
    implementation "androidx.navigation:navigation-ui:$navigation_version"

    //BaseRecyclerViewAdapterHelper RecyclerView库 https://github.com/CymChad/BaseRecyclerViewAdapterHelper
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.6'

    //SmartRefreshLayout 上拉刷新下拉加载, 核心必须依赖
    //https://github.com/scwang90/SmartRefreshLayout/tree/master
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.3'
    //谷歌刷新头
    implementation 'com.scwang.smart:refresh-header-material:2.0.3'
    //经典加载
    implementation 'com.scwang.smart:refresh-footer-classics:2.0.3'
    //球脉冲加载
    implementation 'com.scwang.smart:refresh-footer-ball:2.0.3'

    // 状态栏沉浸：https://github.com/gyf-dev/ImmersionBar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    // fragment快速实现（可选）
//    implementation 'com.gyf.immersionbar:immersionbar-components:3.0.0'

    implementation 'com.aliyun.ams:alicloud-android-utdid:1.5.2'

    //glide https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    //slid menu https://github.com/umano/AndroidSlidingUpPanel
    implementation 'com.sothree.slidinguppanel:library:3.4.0'
    //ARouter https://github.com/alibaba/ARouter
    implementation 'com.alibaba:arouter-api:1.5.1'
    kapt 'com.alibaba:arouter-compiler:1.5.1'
    //EventBus https://github.com/greenrobot/EventBus
    implementation 'org.greenrobot:eventbus:3.2.0'
    //Simplifyspan Spannable library https://github.com/iwgang/SimplifySpan
    implementation 'com.github.iwgang:simplifyspan:2.1'

    // 吐司框架：https://github.com/getActivity/ToastUtils
    implementation 'com.hjq:toast:8.8'

    // AOP 插件库：https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    api 'org.aspectj:aspectjrt:1.9.5'

    // 权限请求框架 https://github.com/tbruyelle/RxPermissions
//    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    // 权限请求框架：https://github.com/getActivity/XXPermissions
    implementation 'com.hjq:xxpermissions:9.8'

    // banner：https://github.com/youth5201314/banner
    implementation 'com.youth.banner:banner:2.1.0'

    // 动画解析库：https://github.com/airbnb/lottie-android
    // 动画资源：https://lottiefiles.com、https://icons8.com/animated-icons
    implementation 'com.airbnb.android:lottie:3.5.0'

    // PhotoView：https://github.com/chrisbanes/PhotoView
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    // ViewPager 指示器：https://github.com/romandanylyk/PageIndicatorView
    implementation 'com.romandanylyk:pageindicatorview:1.0.3'

    // https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md
    implementation 'com.blankj:utilcodex:1.29.0'

    // https://square.github.io/leakcanary/getting_started/
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'

    // https://developer.android.google.cn/training/data-storage/room?hl=zh_cn
    // https://developer.android.com/codelabs/android-room-with-a-view-kotlin?hl=zh_cn#17
    def room_version = "2.2.6"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    //反射库:绕过Android P对非SDK接口限制: https://github.com/tiann/FreeReflection
    implementation 'me.weishu:free_reflection:3.0.1'
}

//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//
//final def log = project.logger
//final def variants = project.android.applicationVariants
//variants.all { variant ->
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return;
//    }
//
//    JavaCompile javaCompile = variant.javaCompile
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         "-1.8",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler);
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                    log.warn message.message, message.thrown
//                    break;
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}
